# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import impala_pb2 as impala__pb2


class IMPALAStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_trajectory = channel.unary_unary(
                '/message.IMPALA/get_trajectory',
                request_serializer=impala__pb2.TrajectoryRequest.SerializeToString,
                response_deserializer=impala__pb2.TrajectoryResponse.FromString,
                )
        self.send_parameter = channel.unary_unary(
                '/message.IMPALA/send_parameter',
                request_serializer=impala__pb2.ParameterRequest.SerializeToString,
                response_deserializer=impala__pb2.ParameterResponse.FromString,
                )


class IMPALAServicer(object):
    """Missing associated documentation comment in .proto file"""

    def get_trajectory(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_parameter(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IMPALAServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_trajectory': grpc.unary_unary_rpc_method_handler(
                    servicer.get_trajectory,
                    request_deserializer=impala__pb2.TrajectoryRequest.FromString,
                    response_serializer=impala__pb2.TrajectoryResponse.SerializeToString,
            ),
            'send_parameter': grpc.unary_unary_rpc_method_handler(
                    servicer.send_parameter,
                    request_deserializer=impala__pb2.ParameterRequest.FromString,
                    response_serializer=impala__pb2.ParameterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'message.IMPALA', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IMPALA(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def get_trajectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/message.IMPALA/get_trajectory',
            impala__pb2.TrajectoryRequest.SerializeToString,
            impala__pb2.TrajectoryResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_parameter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/message.IMPALA/send_parameter',
            impala__pb2.ParameterRequest.SerializeToString,
            impala__pb2.ParameterResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
